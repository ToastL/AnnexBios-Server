"use strict";

var _express = _interopRequireDefault(require("express"));
var _types = require("./types");
var _fs = _interopRequireDefault(require("fs"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const CURR_PATH = __dirname;
const API_PREFIX = '/api';
(async () => {
  const app = (0, _express.default)();
  const port = process.env.PORT || 8080;
  const loop = async (fullPath, path) => {
    const folderContent = await _fs.default.readdirSync(fullPath);
    for (const i in folderContent) {
      const filePath = `${fullPath}/${folderContent[i]}`;
      const file = await _fs.default.lstatSync(filePath);
      if (file.isDirectory()) {
        loop(filePath, `${path}/${folderContent[i]}`);
        continue;
      }
      let routePath = path;
      if (!folderContent[i].startsWith("+index.")) routePath = `${routePath}/${folderContent[i].split('.')[0]}`;
      const route = await (specifier => new Promise(r => r(`${specifier}`)).then(s => _interopRequireWildcard(require(s))))(filePath);
      switch (route.request) {
        case _types.Request.GET:
          app.get(routePath, route.callback);
          break;
        case _types.Request.POST:
          app.post(routePath, route.callback);
          break;
        case _types.Request.GET_POST:
          app.all(routePath, route.callback);
          break;
        default:
          console.log(`Following file is not a route: ${filePath}`);
          continue;
      }
      console.log(routePath);
    }
  };
  try {
    loop(`${CURR_PATH}/routes`, API_PREFIX);
  } catch (e) {
    console.error(e);
    process.exit(-1);
  }
  app.listen(port, () => {
    console.log(`Listening on port ${port}`);
  });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3R5cGVzIiwiX2ZzIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsInIiLCJ0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJDVVJSX1BBVEgiLCJfX2Rpcm5hbWUiLCJBUElfUFJFRklYIiwiYXBwIiwiZXhwcmVzcyIsInBvcnQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsImxvb3AiLCJmdWxsUGF0aCIsInBhdGgiLCJmb2xkZXJDb250ZW50IiwiZnMiLCJyZWFkZGlyU3luYyIsImZpbGVQYXRoIiwiZmlsZSIsImxzdGF0U3luYyIsImlzRGlyZWN0b3J5Iiwicm91dGVQYXRoIiwic3RhcnRzV2l0aCIsInNwbGl0Iiwicm91dGUiLCJzcGVjaWZpZXIiLCJQcm9taXNlIiwidGhlbiIsInMiLCJyZXF1ZXN0IiwiUmVxdWVzdCIsIkdFVCIsImNhbGxiYWNrIiwiUE9TVCIsInBvc3QiLCJHRVRfUE9TVCIsImFsbCIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImV4aXQiLCJsaXN0ZW4iXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIlxuaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgZnMgZnJvbSBcImZzXCJcblxuY29uc3QgQ1VSUl9QQVRIOiBzdHJpbmcgPSBfX2Rpcm5hbWVcbmNvbnN0IEFQSV9QUkVGSVg6IHN0cmluZyA9ICcvYXBpJ1xuXG47KGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhcHAgPSBleHByZXNzKClcbiAgICBjb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDgwO1xuICAgIFxuICAgIGNvbnN0IGxvb3AgPSBhc3luYyAoZnVsbFBhdGg6IHN0cmluZywgcGF0aDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGZvbGRlckNvbnRlbnQgPSBhd2FpdCBmcy5yZWFkZGlyU3luYyhmdWxsUGF0aClcbiAgICAgICAgZm9yIChjb25zdCBpIGluIGZvbGRlckNvbnRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gYCR7ZnVsbFBhdGh9LyR7Zm9sZGVyQ29udGVudFtpXX1gXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXdhaXQgZnMubHN0YXRTeW5jKGZpbGVQYXRoKVxuXG4gICAgICAgICAgICBpZiAoZmlsZS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICAgICAgbG9vcChmaWxlUGF0aCwgYCR7cGF0aH0vJHtmb2xkZXJDb250ZW50W2ldfWApXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHJvdXRlUGF0aCA9IHBhdGhcbiAgICAgICAgICAgIGlmICghZm9sZGVyQ29udGVudFtpXS5zdGFydHNXaXRoKFwiK2luZGV4LlwiKSlcbiAgICAgICAgICAgICAgICByb3V0ZVBhdGggPSBgJHtyb3V0ZVBhdGh9LyR7Zm9sZGVyQ29udGVudFtpXS5zcGxpdCgnLicpWzBdfWBcblxuICAgICAgICAgICAgY29uc3Qgcm91dGUgPSBhd2FpdCBpbXBvcnQoZmlsZVBhdGgpXG4gICAgICAgICAgICBzd2l0Y2ggKHJvdXRlLnJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFJlcXVlc3QuR0VUOlxuICAgICAgICAgICAgICAgICAgICBhcHAuZ2V0KHJvdXRlUGF0aCwgcm91dGUuY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgUmVxdWVzdC5QT1NUOlxuICAgICAgICAgICAgICAgICAgICBhcHAucG9zdChyb3V0ZVBhdGgsIHJvdXRlLmNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFJlcXVlc3QuR0VUX1BPU1Q6XG4gICAgICAgICAgICAgICAgICAgIGFwcC5hbGwocm91dGVQYXRoLCByb3V0ZS5jYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEZvbGxvd2luZyBmaWxlIGlzIG5vdCBhIHJvdXRlOiAke2ZpbGVQYXRofWApXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJvdXRlUGF0aClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGxvb3AoYCR7Q1VSUl9QQVRIfS9yb3V0ZXNgLCBBUElfUFJFRklYKVxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgICAgIHByb2Nlc3MuZXhpdCgtMSlcbiAgICB9XG5cbiAgICBhcHAubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYExpc3RlbmluZyBvbiBwb3J0ICR7cG9ydH1gKVxuICAgIH0pXG5cbn0pKClcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxHQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBbUIsU0FBQUQsdUJBQUFJLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFB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